/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nft.image;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

import javax.imageio.ImageIO;

import org.junit.Test;

public class AppTest {
  @Test
  public void testAppHasAGreeting() {
    App classUnderTest = new App();
    assertNotNull("app should have a greeting", classUnderTest.getGreeting());
  }

  @Test
  public void 로드_프로퍼티() throws Exception {
    Properties prop = loadProperties();
    AppOption appOption = new AppOption(prop);

    System.out.println(appOption);
    assertNotNull(appOption);
  }

  @Test
  public void 로드_데이터_파일() throws Exception {
    AppOption appOption = new AppOption(loadProperties());

    File dataFile = appOption.getDataFile();
    System.out.println(dataFile);
    assertNotNull(dataFile);
  }

  @Test
  public void 로드_기본_이미지_파일() throws Exception {
    AppOption appOption = new AppOption(loadProperties());

    File basicImageFile = appOption.getBasicImageFile();
    System.out.println(basicImageFile);
    assertNotNull(basicImageFile);
  }

  @Test
  public void 로드_서브_이미지_경로() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Path subImagePath = appOption.getSubImagePath();
    System.out.println(subImagePath);
    assertNotNull(subImagePath);
  }

  @Test
  public void 로드_서브_이미지_파일_by_공시지가() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    File subImageFile = App.getSubImageFileByAmount(appOption.getSubImagePath(), 1000);
    System.out.println(subImageFile);
    assertEquals("message", "a.png", subImageFile.getName());
  }

  @Test
  public void 로드_서브_이미지_파일_by_공시지가2() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    File subImageFile = App.getSubImageFileByAmount(appOption.getSubImagePath(), 10000);
    System.out.println(subImageFile);
    assertEquals("message", "b.png", subImageFile.getName());
  }

  @Test
  public void 로드_출력_경로() throws Exception {
    AppOption appOption = new AppOption(loadProperties());

    Path outPath = appOption.getOutPath();
    System.out.println(outPath);
    assertNotNull(outPath);
  }

  @Test
  public void 로드_on_색상() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Long onColor = appOption.getOnColor();
    System.out.println(onColor);
    assertNotNull(onColor);
  }

  @Test
  public void 로드_off_색상() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Long offColor = appOption.getOffColor();
    System.out.println(offColor);
    assertNotNull(offColor);
  }

  @Test
  public void 로드_qrimage_넓이() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer qrimageWidth = appOption.getQrimageWidth();
    System.out.println(qrimageWidth);
    assertNotNull(qrimageWidth);
  }

  @Test
  public void 로드_qrimage_높이() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer qrimageHeight = appOption.getQrimageHeight();
    System.out.println(qrimageHeight);
    assertNotNull(qrimageHeight);
  }

  @Test
  public void 로드_qrimage_그리기시작위치_x() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posX = appOption.getQrimagePosX();
    System.out.println(posX);
    assertNotNull(posX);
  }

  @Test
  public void 로드_qrimage_그리기시작위치_y() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posY = appOption.getQrimagePosY();
    System.out.println(posY);
    assertNotNull(posY);
  }

  @Test
  public void 로드_글꼴이름() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    String fontName = appOption.getFontName();

    System.out.println(fontName);
    assertNotNull(fontName);

  }

  @Test
  public void 로드_글꼴크기() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer fontSize = appOption.getFontSize();

    System.out.println(fontSize);
    assertNotNull(fontSize);

  }

  @Test
  public void 로드_글꼴색상() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    java.awt.Color fontColor = appOption.getFontColor();

    System.out.println(fontColor);
    assertNotNull(fontColor);
  }

  @Test
  public void 로드_주소표시위치_x() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posX = appOption.getAddressDrawPosX();

    System.out.println(posX);
    assertNotNull(posX);

  }

  @Test
  public void 로드_주소표시위치_y() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posY = appOption.getAddressDrawPosY();

    System.out.println(posY);
    assertNotNull(posY);

  }

  @Test
  public void 공백_buffered_image_생성() {
    BufferedImage bufferedImage = App.createBlankBufferedImage(100, 200);
    assertEquals(100, bufferedImage.getWidth());
    assertEquals(200, bufferedImage.getHeight());
  }

  @Test
  public void 로드_서브_이미지_위치_x() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posX = appOption.getSubImagePosX();

    System.out.println(posX);
    assertEquals("100", "" + posX);
  }

  @Test
  public void 로드_서브_이미지_위치_y() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    Integer posY = appOption.getSubImagePosY();

    System.out.println(posY);
    assertEquals("100", "" + posY);
  }

  @Test
  public void nft_이미지_파일로_저장() throws IOException, Exception {
    AppOption appOption = new AppOption(loadProperties());

    java.awt.image.BufferedImage bi = ImageIO.read(appOption.getBasicImageFile());
    String filename = "a.png";
    File outFile = appOption.getOutPath().resolve(filename).toFile();
    App.writeToFile(bi, outFile);

    assertTrue(appOption.getOutPath().resolve(filename).toFile().exists());
  }

  private Properties loadProperties() throws Exception {
    try (InputStream is = new FileInputStream(Paths
        .get("f:\\", "work", "my", "qrimage", "app", "src", "main", "resources", "app.properties").toString())) {
      Properties prop = new Properties();
      prop.load(is);

      return prop;
    } catch (Exception e) {
      throw e;
    }
  }

}
